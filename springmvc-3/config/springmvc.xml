<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
	

	<context:component-scan base-package="org.com.cay" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<mvc:annotation-driven conversion-service="conversionService"/>
	<mvc:default-servlet-handler/>
	
	<!-- 自定义类型转换器 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<ref bean="stringToEmployeeConverter"/>
			</set>
		</property>
	</bean>	
	<!-- 
		Springmvc处理静态资源问题：
			1、为什么会有这样的问题？
				优雅的restful风格的资源url不希望带.html或.do等后缀
				若将DispatcherServlet请求映射配置为/,则Springmvc将捕获web容器的所有请求，包括静态资源的请求，springmvc会将它们当成一个普通的请求处理，因此找不到对应处理器从而导致错误。
			2、解决：
				可以在springmvc的配置文件中配置<mvc:default-servlet-handler/>
	 -->
	
	<mvc:resources location="/bootstrap/**" mapping="/bootstrap/"></mvc:resources>
	<mvc:resources location="/js/**" mapping="/js/"></mvc:resources>
	<mvc:resources location="/css/**" mapping="/css/"></mvc:resources>
	<mvc:resources location="/images/**" mapping="/images/"></mvc:resources>
	 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>
	</bean>
	
	<!-- 配置SessionLocaleResolver -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>
	<!-- 配置LocaleChangeInterceptor -->
	<mvc:interceptors>
		<!-- 
			springmvc拦截器和过滤器类似，先配置哪个拦截器，就先执行该拦截器的preHandler，即
			有两个拦截器FirstInterceptor和SecondInterceptor
			执行顺序：first preHandler 
				-> second preHandler 
				-> 目标方法 
				-> second postHandler 
				-> first postHandler
				-> 视图渲染
				-> second afterCompletion
				-> first afterCompletion
				
			如果某个拦截器的preHandler返回false，则其之后的拦截器不再执行，但是在其之前的拦截器需要afterCompletion(逆序)来释放资源
		 -->
	
		<!-- 自定义拦截器，默认为全局拦截器 -->
		<bean class="org.com.cay.interceptor.FirstInterceptor"></bean>
	
		<mvc:interceptor>
			<!-- mvc:mapping path指定对特定的路径进行拦截 -->
			<mvc:mapping path="/emp"/>
			<bean class="org.com.cay.interceptor.SecondInterceptor"></bean>
		</mvc:interceptor>
		
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
	</mvc:interceptors>
	
	<mvc:view-controller path="/i18n" view-name="i18n"/>
	<mvc:view-controller path="/i18n2" view-name="i18n2"/>
	<mvc:view-controller path="/fileupload" view-name="fileupload"/>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="1024000"></property>
	</bean>
	
	<!-- 配置使用SimpleMappingExceptionResolver来映射异常 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 异常信息会封装在ModelAndView中，key即为exception，可以通过以下方法修改异常名 -->
		<!-- <property name="exceptionAttribute" value="ex"></property> -->
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
			</props>
		</property>
	</bean>
	
</beans>
